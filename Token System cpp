#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<ctime>
using namespace std;
struct Time
{
	int hours;
	int minutes;
	int seconds;
};
struct Date
{
	int day;
	int month;
	int year;
};
struct Token
{
	int tokenNumber;
	Date tokenDate;
	Time tokenTime;
};
struct ServiceCounter
{
	int counterNumber;
	Token list[100];
	int tokensCount;
};

void printDate(Date d)
{
	cout <<"Date:"<< '\t' << d.day << ':' << d.month << ':' << d.year;
}

void printTime(Time t)
{
	if (t.hours > 12)
	{
		cout << "Time:\t" << t.hours-12 << ':' << t.minutes << ':' << t.seconds << " PM";
		
	}
	else if (t.hours == 12)
	{
		cout << "Time:\t" << "12" << ':' << t.minutes << ':' << t.seconds << " PM";
	}
	else
	{
		cout << "Time:\t" << t.hours << ':' << t.minutes << ':' << t.seconds << " AM";
	}
}

Token generateToken()
{
	static int tokenNo = 1;
	Token token;
	token.tokenNumber = tokenNo;
	tokenNo++;
	Time currentTime;
	time_t t = time(0);
	tm curTime = *localtime(&t);
	currentTime.hours = curTime.tm_hour;
	currentTime.minutes = curTime.tm_min;
	currentTime.seconds = curTime.tm_sec;
	Date currentDate;
	currentDate.day = curTime.tm_mday;
	currentDate.month = curTime.tm_mon + 1;
	currentDate.year = curTime.tm_year + 1900;
	token.tokenDate = currentDate;
	token.tokenTime = currentTime;
	return token;
}

void printToken(Token t)
{
	cout << "Token # : " << t.tokenNumber<<'\n';
	printTime(t.tokenTime);
	cout << '\n';
	printDate(t.tokenDate);
	cout << '\n';
}

void initializeServiceCounter(ServiceCounter& sc)
{
	static int counterNo = 1;
	sc.counterNumber = counterNo;
	counterNo++;
	sc.tokensCount = 0;
}

void assignToken(ServiceCounter& sc, Token t)
{
	sc.list[sc.tokensCount] = t;
	sc.tokensCount++;
}

void serviceToken(ServiceCounter& sc)
{
	for (int i = 0; i < sc.tokensCount; i++)
	{
		sc.list[i] = sc.list[i + 1];
	}
	sc.tokensCount--;
}

void printTokenAtServiceCounter(ServiceCounter sc)
{
	cout << "*** Token Queue Waiting For Service @ Counter # " << sc.counterNumber<<'\n';
	for (int i = 0; i < sc.tokensCount; i++)
	{
		printToken(sc.list[i]);
	}
}
